/* 
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iimmpact.Client;
using iimmpact.Model;

namespace iimmpact.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>BillPresentmentResponse</returns>
        BillPresentmentResponse V1BillPresentmentGet (string account, string accountName = null, string product = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>ApiResponse of BillPresentmentResponse</returns>
        ApiResponse<BillPresentmentResponse> V1BillPresentmentGetWithHttpInfo (string account, string accountName = null, string product = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>NetworkStatusResponse</returns>
        NetworkStatusResponse V1NetworkstatusGet (string product);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>ApiResponse of NetworkStatusResponse</returns>
        ApiResponse<NetworkStatusResponse> V1NetworkstatusGetWithHttpInfo (string product);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>TopupResponse</returns>
        TopupResponse V1TopupPost (TopupRequest topupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>ApiResponse of TopupResponse</returns>
        ApiResponse<TopupResponse> V1TopupPostWithHttpInfo (TopupRequest topupRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>Task of BillPresentmentResponse</returns>
        System.Threading.Tasks.Task<BillPresentmentResponse> V1BillPresentmentGetAsync (string account, string accountName = null, string product = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>Task of ApiResponse (BillPresentmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillPresentmentResponse>> V1BillPresentmentGetAsyncWithHttpInfo (string account, string accountName = null, string product = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of NetworkStatusResponse</returns>
        System.Threading.Tasks.Task<NetworkStatusResponse> V1NetworkstatusGetAsync (string product);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of ApiResponse (NetworkStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkStatusResponse>> V1NetworkstatusGetAsyncWithHttpInfo (string product);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>Task of TopupResponse</returns>
        System.Threading.Tasks.Task<TopupResponse> V1TopupPostAsync (TopupRequest topupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>Task of ApiResponse (TopupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopupResponse>> V1TopupPostAsyncWithHttpInfo (TopupRequest topupRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServicesApi : IServicesApi
    {
        private iimmpact.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicesApi(String basePath)
        {
            this.Configuration = new iimmpact.Client.Configuration { BasePath = basePath };

            ExceptionFactory = iimmpact.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServicesApi(iimmpact.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = iimmpact.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iimmpact.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public iimmpact.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iimmpact.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>BillPresentmentResponse</returns>
        public BillPresentmentResponse V1BillPresentmentGet (string account, string accountName = null, string product = null)
        {
             ApiResponse<BillPresentmentResponse> localVarResponse = V1BillPresentmentGetWithHttpInfo(account, accountName, product);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>ApiResponse of BillPresentmentResponse</returns>
        public ApiResponse< BillPresentmentResponse > V1BillPresentmentGetWithHttpInfo (string account, string accountName = null, string product = null)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling ServicesApi->V1BillPresentmentGet");

            var localVarPath = "/v1/bill-presentment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_name", accountName)); // query parameter
            if (account != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account", account)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1BillPresentmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPresentmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillPresentmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPresentmentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>Task of BillPresentmentResponse</returns>
        public async System.Threading.Tasks.Task<BillPresentmentResponse> V1BillPresentmentGetAsync (string account, string accountName = null, string product = null)
        {
             ApiResponse<BillPresentmentResponse> localVarResponse = await V1BillPresentmentGetAsyncWithHttpInfo(account, accountName, product);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account"></param>
        /// <param name="accountName"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <returns>Task of ApiResponse (BillPresentmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillPresentmentResponse>> V1BillPresentmentGetAsyncWithHttpInfo (string account, string accountName = null, string product = null)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling ServicesApi->V1BillPresentmentGet");

            var localVarPath = "/v1/bill-presentment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_name", accountName)); // query parameter
            if (account != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account", account)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1BillPresentmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPresentmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillPresentmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPresentmentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>NetworkStatusResponse</returns>
        public NetworkStatusResponse V1NetworkstatusGet (string product)
        {
             ApiResponse<NetworkStatusResponse> localVarResponse = V1NetworkstatusGetWithHttpInfo(product);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>ApiResponse of NetworkStatusResponse</returns>
        public ApiResponse< NetworkStatusResponse > V1NetworkstatusGetWithHttpInfo (string product)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling ServicesApi->V1NetworkstatusGet");

            var localVarPath = "/v1/networkstatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1NetworkstatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NetworkStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkStatusResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of NetworkStatusResponse</returns>
        public async System.Threading.Tasks.Task<NetworkStatusResponse> V1NetworkstatusGetAsync (string product)
        {
             ApiResponse<NetworkStatusResponse> localVarResponse = await V1NetworkstatusGetAsyncWithHttpInfo(product);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of ApiResponse (NetworkStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkStatusResponse>> V1NetworkstatusGetAsyncWithHttpInfo (string product)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling ServicesApi->V1NetworkstatusGet");

            var localVarPath = "/v1/networkstatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1NetworkstatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NetworkStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkStatusResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>TopupResponse</returns>
        public TopupResponse V1TopupPost (TopupRequest topupRequest)
        {
             ApiResponse<TopupResponse> localVarResponse = V1TopupPostWithHttpInfo(topupRequest);
			while (localVarResponse.Data.Data.Status != "Failed" && localVarResponse.Data.Data.Status != "Succesful")
			{
				localVarResponse = V1TopupPostWithHttpInfo(topupRequest);
			}
			return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>ApiResponse of TopupResponse</returns>
        public ApiResponse< TopupResponse > V1TopupPostWithHttpInfo (TopupRequest topupRequest)
        {
            // verify the required parameter 'topupRequest' is set
            if (topupRequest == null)
                throw new ApiException(400, "Missing required parameter 'topupRequest' when calling ServicesApi->V1TopupPost");

            var localVarPath = "/v1/topup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topupRequest != null && topupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(topupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = topupRequest; // byte array
            }

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1TopupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopupResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>Task of TopupResponse</returns>
        public async System.Threading.Tasks.Task<TopupResponse> V1TopupPostAsync (TopupRequest topupRequest)
        {
             ApiResponse<TopupResponse> localVarResponse = await V1TopupPostAsyncWithHttpInfo(topupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topupRequest"></param>
        /// <returns>Task of ApiResponse (TopupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TopupResponse>> V1TopupPostAsyncWithHttpInfo (TopupRequest topupRequest)
        {
            // verify the required parameter 'topupRequest' is set
            if (topupRequest == null)
                throw new ApiException(400, "Missing required parameter 'topupRequest' when calling ServicesApi->V1TopupPost");

            var localVarPath = "/v1/topup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topupRequest != null && topupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(topupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = topupRequest; // byte array
            }

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1TopupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TopupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopupResponse)));
        }

    }
}
