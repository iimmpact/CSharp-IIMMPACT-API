/* 
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iimmpact.Client;
using iimmpact.Model;

namespace iimmpact.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJPJRecordsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        JPJRecordsResponse V1JpjDrivingLicenseGet (string idNo, string idType, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        ApiResponse<JPJRecordsResponse> V1JpjDrivingLicenseGetWithHttpInfo (string idNo, string idType, string captcha = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        JPJRecordsResponse V1JpjDrivingTestResultsGet (string idNo, string idType, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        ApiResponse<JPJRecordsResponse> V1JpjDrivingTestResultsGetWithHttpInfo (string idNo, string idType, string captcha = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        JPJRecordsResponse V1JpjMotorVehicleExpiryGet (string idNo, string idType, string vehicleNo, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        ApiResponse<JPJRecordsResponse> V1JpjMotorVehicleExpiryGetWithHttpInfo (string idNo, string idType, string vehicleNo, string captcha = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        JPJRecordsResponse V1JpjSummonsGet (string idNo, string idType, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        ApiResponse<JPJRecordsResponse> V1JpjSummonsGetWithHttpInfo (string idNo, string idType, string captcha = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjDrivingLicenseGetAsync (string idNo, string idType, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjDrivingLicenseGetAsyncWithHttpInfo (string idNo, string idType, string captcha = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjDrivingTestResultsGetAsync (string idNo, string idType, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjDrivingTestResultsGetAsyncWithHttpInfo (string idNo, string idType, string captcha = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjMotorVehicleExpiryGetAsync (string idNo, string idType, string vehicleNo, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjMotorVehicleExpiryGetAsyncWithHttpInfo (string idNo, string idType, string vehicleNo, string captcha = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjSummonsGetAsync (string idNo, string idType, string captcha = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjSummonsGetAsyncWithHttpInfo (string idNo, string idType, string captcha = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JPJRecordsApi : IJPJRecordsApi
    {
        private iimmpact.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JPJRecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JPJRecordsApi(String basePath)
        {
            this.Configuration = new iimmpact.Client.Configuration { BasePath = basePath };

            ExceptionFactory = iimmpact.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JPJRecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JPJRecordsApi(iimmpact.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = iimmpact.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iimmpact.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public iimmpact.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iimmpact.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        public JPJRecordsResponse V1JpjDrivingLicenseGet (string idNo, string idType, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = V1JpjDrivingLicenseGetWithHttpInfo(idNo, idType, captcha);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        public ApiResponse< JPJRecordsResponse > V1JpjDrivingLicenseGetWithHttpInfo (string idNo, string idType, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjDrivingLicenseGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjDrivingLicenseGet");

            var localVarPath = "/v1/jpj/driving-license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjDrivingLicenseGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        public async System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjDrivingLicenseGetAsync (string idNo, string idType, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = await V1JpjDrivingLicenseGetAsyncWithHttpInfo(idNo, idType, captcha);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjDrivingLicenseGetAsyncWithHttpInfo (string idNo, string idType, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjDrivingLicenseGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjDrivingLicenseGet");

            var localVarPath = "/v1/jpj/driving-license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjDrivingLicenseGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        public JPJRecordsResponse V1JpjDrivingTestResultsGet (string idNo, string idType, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = V1JpjDrivingTestResultsGetWithHttpInfo(idNo, idType, captcha);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        public ApiResponse< JPJRecordsResponse > V1JpjDrivingTestResultsGetWithHttpInfo (string idNo, string idType, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjDrivingTestResultsGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjDrivingTestResultsGet");

            var localVarPath = "/v1/jpj/driving-test-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjDrivingTestResultsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        public async System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjDrivingTestResultsGetAsync (string idNo, string idType, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = await V1JpjDrivingTestResultsGetAsyncWithHttpInfo(idNo, idType, captcha);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjDrivingTestResultsGetAsyncWithHttpInfo (string idNo, string idType, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjDrivingTestResultsGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjDrivingTestResultsGet");

            var localVarPath = "/v1/jpj/driving-test-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjDrivingTestResultsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        public JPJRecordsResponse V1JpjMotorVehicleExpiryGet (string idNo, string idType, string vehicleNo, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = V1JpjMotorVehicleExpiryGetWithHttpInfo(idNo, idType, vehicleNo, captcha);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        public ApiResponse< JPJRecordsResponse > V1JpjMotorVehicleExpiryGetWithHttpInfo (string idNo, string idType, string vehicleNo, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjMotorVehicleExpiryGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjMotorVehicleExpiryGet");
            // verify the required parameter 'vehicleNo' is set
            if (vehicleNo == null)
                throw new ApiException(400, "Missing required parameter 'vehicleNo' when calling JPJRecordsApi->V1JpjMotorVehicleExpiryGet");

            var localVarPath = "/v1/jpj/motor-vehicle-expiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter
            if (vehicleNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vehicle_no", vehicleNo)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjMotorVehicleExpiryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        public async System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjMotorVehicleExpiryGetAsync (string idNo, string idType, string vehicleNo, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = await V1JpjMotorVehicleExpiryGetAsyncWithHttpInfo(idNo, idType, vehicleNo, captcha);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="vehicleNo"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjMotorVehicleExpiryGetAsyncWithHttpInfo (string idNo, string idType, string vehicleNo, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjMotorVehicleExpiryGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjMotorVehicleExpiryGet");
            // verify the required parameter 'vehicleNo' is set
            if (vehicleNo == null)
                throw new ApiException(400, "Missing required parameter 'vehicleNo' when calling JPJRecordsApi->V1JpjMotorVehicleExpiryGet");

            var localVarPath = "/v1/jpj/motor-vehicle-expiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter
            if (vehicleNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vehicle_no", vehicleNo)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjMotorVehicleExpiryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>JPJRecordsResponse</returns>
        public JPJRecordsResponse V1JpjSummonsGet (string idNo, string idType, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = V1JpjSummonsGetWithHttpInfo(idNo, idType, captcha);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>ApiResponse of JPJRecordsResponse</returns>
        public ApiResponse< JPJRecordsResponse > V1JpjSummonsGetWithHttpInfo (string idNo, string idType, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjSummonsGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjSummonsGet");

            var localVarPath = "/v1/jpj/summons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjSummonsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of JPJRecordsResponse</returns>
        public async System.Threading.Tasks.Task<JPJRecordsResponse> V1JpjSummonsGetAsync (string idNo, string idType, string captcha = null)
        {
             ApiResponse<JPJRecordsResponse> localVarResponse = await V1JpjSummonsGetAsyncWithHttpInfo(idNo, idType, captcha);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="iimmpact.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNo"></param>
        /// <param name="idType"></param>
        /// <param name="captcha"> (optional)</param>
        /// <returns>Task of ApiResponse (JPJRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JPJRecordsResponse>> V1JpjSummonsGetAsyncWithHttpInfo (string idNo, string idType, string captcha = null)
        {
            // verify the required parameter 'idNo' is set
            if (idNo == null)
                throw new ApiException(400, "Missing required parameter 'idNo' when calling JPJRecordsApi->V1JpjSummonsGet");
            // verify the required parameter 'idType' is set
            if (idType == null)
                throw new ApiException(400, "Missing required parameter 'idType' when calling JPJRecordsApi->V1JpjSummonsGet");

            var localVarPath = "/v1/jpj/summons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idNo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_no", idNo)); // query parameter
            if (idType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id_type", idType)); // query parameter
            if (captcha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "captcha", captcha)); // query parameter

            // authentication (SSO) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1JpjSummonsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JPJRecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JPJRecordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JPJRecordsResponse)));
        }

    }
}
