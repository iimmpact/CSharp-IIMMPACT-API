/* 
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iimmpact.Client.SwaggerDateConverter;

namespace iimmpact.Model
{
    /// <summary>
    /// TransactionsResponseMeta
    /// </summary>
    [DataContract]
    public partial class TransactionsResponseMeta :  IEquatable<TransactionsResponseMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsResponseMeta" /> class.
        /// </summary>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="transactionCount">transactionCount.</param>
        public TransactionsResponseMeta(decimal? totalAmount = default(decimal?), decimal? totalPrice = default(decimal?), string transactionCount = default(string))
        {
            this.TotalAmount = totalAmount;
            this.TotalPrice = totalPrice;
            this.TransactionCount = transactionCount;
        }
        
        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="total_amount", EmitDefaultValue=false)]
        public decimal? TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name="total_price", EmitDefaultValue=false)]
        public decimal? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCount
        /// </summary>
        [DataMember(Name="transaction_count", EmitDefaultValue=false)]
        public string TransactionCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionsResponseMeta {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  TransactionCount: ").Append(TransactionCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionsResponseMeta);
        }

        /// <summary>
        /// Returns true if TransactionsResponseMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionsResponseMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionsResponseMeta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.TransactionCount == input.TransactionCount ||
                    (this.TransactionCount != null &&
                    this.TransactionCount.Equals(input.TransactionCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.TransactionCount != null)
                    hashCode = hashCode * 59 + this.TransactionCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
