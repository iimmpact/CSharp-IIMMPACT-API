/* 
 * IIMMPACT API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-09-14T13:01:14Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iimmpact.Client.SwaggerDateConverter;

namespace iimmpact.Model
{
    /// <summary>
    /// CarInsuranceRespone
    /// </summary>
    [DataContract]
    public partial class CarInsuranceRespone :  IEquatable<CarInsuranceRespone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CarInsuranceRespone" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="yearMake">yearMake.</param>
        /// <param name="chassisNo">chassisNo.</param>
        /// <param name="engineNo">engineNo.</param>
        /// <param name="seatingCapacity">seatingCapacity.</param>
        /// <param name="variant">variant.</param>
        /// <param name="vehImage">vehImage.</param>
        /// <param name="nextNCDPerCentage">nextNCDPerCentage.</param>
        /// <param name="nextNcdExpDate">nextNcdExpDate.</param>
        /// <param name="currentPolicy">currentPolicy.</param>
        public CarInsuranceRespone(string message = default(string), string make = default(string), string model = default(string), string yearMake = default(string), string chassisNo = default(string), string engineNo = default(string), string seatingCapacity = default(string), List<CarInsuranceResponeVariant> variant = default(List<CarInsuranceResponeVariant>), string vehImage = default(string), string nextNCDPerCentage = default(string), string nextNcdExpDate = default(string), string currentPolicy = default(string))
        {
            this.Message = message;
            this.Make = make;
            this.Model = model;
            this.YearMake = yearMake;
            this.ChassisNo = chassisNo;
            this.EngineNo = engineNo;
            this.SeatingCapacity = seatingCapacity;
            this.Variant = variant;
            this.VehImage = vehImage;
            this.NextNCDPerCentage = nextNCDPerCentage;
            this.NextNcdExpDate = nextNcdExpDate;
            this.CurrentPolicy = currentPolicy;
        }
        
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name="make", EmitDefaultValue=false)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets YearMake
        /// </summary>
        [DataMember(Name="yearMake", EmitDefaultValue=false)]
        public string YearMake { get; set; }

        /// <summary>
        /// Gets or Sets ChassisNo
        /// </summary>
        [DataMember(Name="chassisNo", EmitDefaultValue=false)]
        public string ChassisNo { get; set; }

        /// <summary>
        /// Gets or Sets EngineNo
        /// </summary>
        [DataMember(Name="engineNo", EmitDefaultValue=false)]
        public string EngineNo { get; set; }

        /// <summary>
        /// Gets or Sets SeatingCapacity
        /// </summary>
        [DataMember(Name="seatingCapacity", EmitDefaultValue=false)]
        public string SeatingCapacity { get; set; }

        /// <summary>
        /// Gets or Sets Variant
        /// </summary>
        [DataMember(Name="variant", EmitDefaultValue=false)]
        public List<CarInsuranceResponeVariant> Variant { get; set; }

        /// <summary>
        /// Gets or Sets VehImage
        /// </summary>
        [DataMember(Name="vehImage", EmitDefaultValue=false)]
        public string VehImage { get; set; }

        /// <summary>
        /// Gets or Sets NextNCDPerCentage
        /// </summary>
        [DataMember(Name="nextNCDPerCentage", EmitDefaultValue=false)]
        public string NextNCDPerCentage { get; set; }

        /// <summary>
        /// Gets or Sets NextNcdExpDate
        /// </summary>
        [DataMember(Name="nextNcdExpDate", EmitDefaultValue=false)]
        public string NextNcdExpDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPolicy
        /// </summary>
        [DataMember(Name="currentPolicy", EmitDefaultValue=false)]
        public string CurrentPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarInsuranceRespone {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  YearMake: ").Append(YearMake).Append("\n");
            sb.Append("  ChassisNo: ").Append(ChassisNo).Append("\n");
            sb.Append("  EngineNo: ").Append(EngineNo).Append("\n");
            sb.Append("  SeatingCapacity: ").Append(SeatingCapacity).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("  VehImage: ").Append(VehImage).Append("\n");
            sb.Append("  NextNCDPerCentage: ").Append(NextNCDPerCentage).Append("\n");
            sb.Append("  NextNcdExpDate: ").Append(NextNcdExpDate).Append("\n");
            sb.Append("  CurrentPolicy: ").Append(CurrentPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CarInsuranceRespone);
        }

        /// <summary>
        /// Returns true if CarInsuranceRespone instances are equal
        /// </summary>
        /// <param name="input">Instance of CarInsuranceRespone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarInsuranceRespone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.YearMake == input.YearMake ||
                    (this.YearMake != null &&
                    this.YearMake.Equals(input.YearMake))
                ) && 
                (
                    this.ChassisNo == input.ChassisNo ||
                    (this.ChassisNo != null &&
                    this.ChassisNo.Equals(input.ChassisNo))
                ) && 
                (
                    this.EngineNo == input.EngineNo ||
                    (this.EngineNo != null &&
                    this.EngineNo.Equals(input.EngineNo))
                ) && 
                (
                    this.SeatingCapacity == input.SeatingCapacity ||
                    (this.SeatingCapacity != null &&
                    this.SeatingCapacity.Equals(input.SeatingCapacity))
                ) && 
                (
                    this.Variant == input.Variant ||
                    this.Variant != null &&
                    this.Variant.SequenceEqual(input.Variant)
                ) && 
                (
                    this.VehImage == input.VehImage ||
                    (this.VehImage != null &&
                    this.VehImage.Equals(input.VehImage))
                ) && 
                (
                    this.NextNCDPerCentage == input.NextNCDPerCentage ||
                    (this.NextNCDPerCentage != null &&
                    this.NextNCDPerCentage.Equals(input.NextNCDPerCentage))
                ) && 
                (
                    this.NextNcdExpDate == input.NextNcdExpDate ||
                    (this.NextNcdExpDate != null &&
                    this.NextNcdExpDate.Equals(input.NextNcdExpDate))
                ) && 
                (
                    this.CurrentPolicy == input.CurrentPolicy ||
                    (this.CurrentPolicy != null &&
                    this.CurrentPolicy.Equals(input.CurrentPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.YearMake != null)
                    hashCode = hashCode * 59 + this.YearMake.GetHashCode();
                if (this.ChassisNo != null)
                    hashCode = hashCode * 59 + this.ChassisNo.GetHashCode();
                if (this.EngineNo != null)
                    hashCode = hashCode * 59 + this.EngineNo.GetHashCode();
                if (this.SeatingCapacity != null)
                    hashCode = hashCode * 59 + this.SeatingCapacity.GetHashCode();
                if (this.Variant != null)
                    hashCode = hashCode * 59 + this.Variant.GetHashCode();
                if (this.VehImage != null)
                    hashCode = hashCode * 59 + this.VehImage.GetHashCode();
                if (this.NextNCDPerCentage != null)
                    hashCode = hashCode * 59 + this.NextNCDPerCentage.GetHashCode();
                if (this.NextNcdExpDate != null)
                    hashCode = hashCode * 59 + this.NextNcdExpDate.GetHashCode();
                if (this.CurrentPolicy != null)
                    hashCode = hashCode * 59 + this.CurrentPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
